#!/bin/bash

#set -x

# These two variables can be overwritten

: ${KVM_BLK_OPTS:="-drive file=\$KVM_IMAGE,if=none,id=drive-disk0,format=qcow2 \
-device virtio-blk-pci,scsi=off,bus=pci.0,addr=0x6,drive=drive-disk0,id=virtio-disk0,bootindex=1"}
: ${KVM_NET_OPTS:="-netdev bridge,br=\$BRIDGE_IFACE,id=net0 \
-device virtio-net-pci,netdev=net0,mac=\$MAC"}

# For debugging
if [ "$1" = "bash" ]; then
  exec bash
fi

# Pass Docker command args to kvm
KVM_ARGS=$@

# Create the qcow disk image on the Docker volume named /image, using
# the compressed qcow image that came with Docker image as the base.
# Docker volumes typically perform better than the file system for
# Docker images (no need for overlay fs etc.)

BASE_IMAGE_DIR_LIST=( `ls /base_image` )
if [ ${#BASE_IMAGE_DIR_LIST[@]} -ne 1 ]; then
  echo "/base_image directory must contain exactly one base image file"
  exit 1
fi

if [ ! -d "/image" ]; then
  echo "/image directory does not exist, failed to mount volume /image?"
  exit 2
fi

KVM_IMAGE=/image/sda.qcow2
if [ ! -f "$KVM_IMAGE" ]; then
  qemu-img create -f qcow2 -b /base_image/${BASE_IMAGE_DIR_LIST[0]} \
  $KVM_IMAGE > /dev/null
  if [[ $? -ne 0 ]]; then
    echo "Failed to create qcow2 image"
    exit 3
  fi
fi

# Network setup:
#
# 1. Create a bridge named br0
# 2. Remove IP from eth0, save eth0 MAC, give eth0 a random MAC

IFACE=eth0
BRIDGE_IFACE=br0

MAC=`ip addr show $IFACE | grep ether | sed -e 's/^[[:space:]]*//g' -e 's/[[:space:]]*\$//g' | cut -f2 -d ' '`

# Generate random new MAC address
hexchars="0123456789ABCDEF"
end=$( for i in {1..8} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/:\1/g' )
NEWMAC=`echo 06:FE$end`

ip link set dev $IFACE down
ip link set $IFACE address $NEWMAC
ip addr flush dev $IFACE

brctl addbr $BRIDGE_IFACE
brctl addif $BRIDGE_IFACE $IFACE
ip link set dev $IFACE up
ip link set dev $BRIDGE_IFACE up

if [[ $? -ne 0 ]]; then
    echo "Failed to bring up network bridge"
    exit 4
fi

# Exec kvm as PID 1

echo allow $BRIDGE_IFACE >  /etc/qemu/bridge.conf 

# If /vmmgmt does not exist, we still proceed with running KVM. We just
# won't get a VNC console socket.

if [ -d /vmmgmt ]; then
    DOCKERID=`cat /proc/self/cgroup | grep cpu | cut -f 3 -d / | head -1`
    mkdir -p /vmmgmt/vm/$DOCKERID
    VNC="-vnc unix:/vmmgmt/vm/$DOCKERID/vnc"
fi

exec kvm $VNC `eval echo $KVM_BLK_OPTS` `eval echo $KVM_NET_OPTS` $KVM_ARGS
